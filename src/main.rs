extern crate base64;
extern crate directories;
extern crate dirs_2;

use base64::engine::general_purpose;
use base64::Engine;

use std::{fs};

//const CHROME_STATE_PATH: &str = "\\Google\\Chrome\\User Data\\Local State";
const EDGE_STATE_PATH: &str = "\\Microsoft\\Edge\\User Data\\Local State";

fn base64_decode(encode_str: &str) -> Result<String, base64::DecodeError>
{
    let decode_bytes = general_purpose::STANDARD.decode(encode_str).unwrap();
    let chars: String = decode_bytes.into_iter().map(|c| c as char).collect();
    Ok(chars)
}

fn get_app_data_path() -> Result<String, String>
{
    if let Some(app_data_path) = dirs_2::data_local_dir(){
        if let Some(path_str) = app_data_path.to_str(){
            return Ok(path_str.to_string());
        }else{
            return Err("Path conversion error".to_string());
        }
    }else{
        return Err("Local Data directory path not found".to_string());
    }
}

fn get_local_state_path() -> Result<String, String>
{
    let app_data_path = get_app_data_path()?;
    let local_state_path = app_data_path + EDGE_STATE_PATH;
    Ok(local_state_path)
}

fn read_file_to_string(file_path: &str)
{
    let a = fs::read_to_string(file_path);
}

fn main() {
    let base64_string = "RFBBUEk=";

    let decode_string = base64_decode(base64_string);
    println!("{:?}", decode_string);

    let app_data_path = get_local_state_path();
    println!("{:?}", app_data_path);
}
